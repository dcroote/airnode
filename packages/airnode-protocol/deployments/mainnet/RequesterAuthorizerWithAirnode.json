{
  "address": "0x728f307Fd43327bE2fB9Ef61A9f00D956402A35c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminRoleDescription",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "ExtendedWhitelistExpiration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "RevokedIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "SetIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "SetWhitelistExpiration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "indefiniteWhitelistStatus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "airnodeToEndpointIdToRequesterToWhitelistStatus",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveAdminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveIndefiniteWhitelisterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "indefiniteWhitelisterRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveWhitelistExpirationExtenderRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "whitelistExpirationExtenderRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveWhitelistExpirationSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "whitelistExpirationSetterRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "extendWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "requesterIsWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "revokeIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "setWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x086878b2de6eb60dca040a3e21d4ca3fb7706842845145998b8872187ea4bc5e",
  "receipt": {
    "to": null,
    "from": "0x47adCDcaA250C257C6e4db6dD091C6A6739333C9",
    "contractAddress": "0x728f307Fd43327bE2fB9Ef61A9f00D956402A35c",
    "transactionIndex": 210,
    "gasUsed": "2141547",
    "logsBloom": "0x
    "blockHash": "0xb12a6d794e785c584ac43b221845b5165609e07ef74dd5886fa48796130f7ade",
    "transactionHash": "0x086878b2de6eb60dca040a3e21d4ca3fb7706842845145998b8872187ea4bc5e",
    "logs": [],
    "blockNumber": 13519264,
    "cumulativeGasUsed": "12022802",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x7471091Fd3f158E7586a838BD70F1c7F19CA9497", "RequesterAuthorizerWithAirnode admin"],
  "solcInputHash": "e3d949232f846f22d57b20a2fd7df255",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminRoleDescription\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"ExtendedWhitelistExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"RevokedIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"SetIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"SetWhitelistExpiration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INDEFINITE_WHITELISTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"indefiniteWhitelistStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"airnodeToEndpointIdToRequesterToWhitelistStatus\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveAdminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveIndefiniteWhitelisterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"indefiniteWhitelisterRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveWhitelistExpirationExtenderRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"whitelistExpirationExtenderRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveWhitelistExpirationSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"whitelistExpirationSetterRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"extendWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"requesterIsWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"revokeIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"setWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"setter\":\"Address of the account that has potentially whitelisted `requester` for the `airnode`\\u2013`endpointId` pair indefinitely\"},\"returns\":{\"indefiniteWhitelistStatus\":\"If `setter` has indefinitely whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\"}},\"airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\"},\"returns\":{\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"indefiniteWhitelistCount\":\"Number of times `requester` was whitelisted indefinitely for the `airnode`\\u2013`endpointId` pair\"}},\"constructor\":{\"params\":{\"_accessControlRegistry\":\"AccessControlRegistry contract address\",\"_adminRoleDescription\":\"Admin role description\"}},\"deriveAdminRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"adminRole\":\"Admin role\"}},\"deriveIndefiniteWhitelisterRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"indefiniteWhitelisterRole\":\"Indefinite whitelister role\"}},\"deriveWhitelistExpirationExtenderRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"whitelistExpirationExtenderRole\":\"Whitelist expiration extender role\"}},\"deriveWhitelistExpirationSetterRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"whitelistExpirationSetterRole\":\"Whitelist expiration setter role\"}},\"extendWhitelistExpiration(address,bytes32,address,uint64)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"requester\":\"Requester address\"}},\"isAuthorized(bytes32,address,bytes32,address,address)\":{\"details\":\"This method has redundant arguments because all authorizer contracts have to have the same interface and potential authorizer contracts may require to access the arguments that are redundant here\",\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requestId\":\"Request ID\",\"requester\":\"Requester address\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"_0\":\"Authorization status of the request\"}},\"requesterIsWhitelisted(address,bytes32,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\"},\"returns\":{\"isWhitelisted\":\"If `requester` is whitelisted for the `airnode`\\u2013`endpointId` pair\"}},\"revokeIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"setter\":\"Setter of the indefinite whitelist status\"}},\"setIndefiniteWhitelistStatus(address,bytes32,address,bool)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"status\":\"Indefinite whitelist status\"}},\"setWhitelistExpiration(address,bytes32,address,uint64)\":{\"details\":\"Unlike `extendWhitelistExpiration()`, this can hasten expiration\",\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"requester\":\"Requester address\"}}},\"title\":\"Authorizer contract that Airnodes can use to temporarily or indefinitely whitelist requesters for Airnode\\u2013endpoint pairs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accessControlRegistry()\":{\"notice\":\"Address of the AccessControlRegistry contract that keeps the roles\"},\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"notice\":\"Returns if an account has indefinitely whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\"},\"airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)\":{\"notice\":\"Returns the whitelist status of `requester` for the `airnode`\\u2013`endpointId` pair\"},\"deriveAdminRole(address)\":{\"notice\":\"Derives the admin role for the specific Airnode address\"},\"deriveIndefiniteWhitelisterRole(address)\":{\"notice\":\"Derives the indefinite whitelister role for the specific Airnode address\"},\"deriveWhitelistExpirationExtenderRole(address)\":{\"notice\":\"Derives the whitelist expiration extender role for the specific Airnode address\"},\"deriveWhitelistExpirationSetterRole(address)\":{\"notice\":\"Derives the whitelist expiration setter role for the specific Airnode address\"},\"extendWhitelistExpiration(address,bytes32,address,uint64)\":{\"notice\":\"Extends the expiration of the temporary whitelist of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist expiration extender role\"},\"isAuthorized(bytes32,address,bytes32,address,address)\":{\"notice\":\"Verifies the authorization status of a request\"},\"requesterIsWhitelisted(address,bytes32,address)\":{\"notice\":\"Returns if `requester` is whitelisted for the `airnode`\\u2013`endpointId` pair\"},\"revokeIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"notice\":\"Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role\"},\"setIndefiniteWhitelistStatus(address,bytes32,address,bool)\":{\"notice\":\"Sets the indefinite whitelist status of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the indefinite whitelister role\"},\"setWhitelistExpiration(address,bytes32,address,uint64)\":{\"notice\":\"Sets the expiration of the temporary whitelist of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist expiration setter role\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/authorizers/RequesterAuthorizerWithAirnode.sol\":\"RequesterAuthorizerWithAirnode\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"contracts/access-control-registry/AccessControlClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./interfaces/IAccessControlClient.sol\\\";\\n\\ncontract AccessControlClient is IAccessControlClient {\\n    /// @notice Address of the AccessControlRegistry contract that keeps the\\n    /// roles\\n    address public immutable override accessControlRegistry;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    constructor(address _accessControlRegistry) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        accessControlRegistry = _accessControlRegistry;\\n    }\\n}\\n\",\"keccak256\":\"0xab33f78695427014ee23e72ea292e73b5a168f8dcb390f7444cf70a3ee73effa\",\"license\":\"MIT\"},\"contracts/access-control-registry/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Contract that implements the AccessControlRegistry role derivation\\n/// logic\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive roles, it should inherit this contract instead of re-implementing\\n/// the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(address manager)\\n        internal\\n        pure\\n        returns (bytes32 rootRole)\\n    {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Human-readable description of the role\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, string memory description)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Hash of the human-readable description of the\\n    /// role\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, bytes32 descriptionHash)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x600f64c53fe1811b8f4fb2153efd6b68506dd047fe91fa35e4d6d0bf907c5e72\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IAccessControlClient {\\n    function accessControlRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6f6e2593b71aac24ee4283c366465c20a9a22c52dedf09b7569b4737909d5526\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlRegistry is IAccessControl {\\n    event InitializedManager(bytes32 indexed rootRole, address indexed manager);\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRole(bytes32 adminRole, string calldata description)\\n        external\\n        returns (bytes32 role);\\n\\n    function initializeAndGrantRoles(\\n        bytes32[] calldata adminRoles,\\n        string[] calldata descriptions,\\n        address[] calldata accounts\\n    ) external returns (bytes32[] memory roles);\\n\\n    function deriveRootRole(address manager)\\n        external\\n        pure\\n        returns (bytes32 rootRole);\\n\\n    function deriveRole(bytes32 adminRole, string calldata description)\\n        external\\n        pure\\n        returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0xf9ae1645330f181414cb23ef3d4af410c3a7b5772c5e1fbac9d533bdd4897c63\",\"license\":\"MIT\"},\"contracts/authorizers/RequesterAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../whitelist/Whitelist.sol\\\";\\nimport \\\"./interfaces/IRequesterAuthorizer.sol\\\";\\n\\n/// @title Abstract contract that can be used to build Airnode authorizers that\\n/// temporarily or permanently whitelist requesters for Airnode\\u2013endpoint pairs\\nabstract contract RequesterAuthorizer is Whitelist, IRequesterAuthorizer {\\n    /// @notice Extends the expiration of the temporary whitelist of\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _extendWhitelistExpirationAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        _extendWhitelistExpiration(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            expirationTimestamp\\n        );\\n        emit ExtendedWhitelistExpiration(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @dev Unlike `_extendWhitelistExpiration()`, this can hasten expiration.\\n    /// Emits the event even if it does not change the state.\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _setWhitelistExpirationAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        _setWhitelistExpiration(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            expirationTimestamp\\n        );\\n        emit SetWhitelistExpiration(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @dev Emits the event even if it does not change the state.\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param status Indefinite whitelist status\\n    function _setIndefiniteWhitelistStatusAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) internal {\\n        uint192 indefiniteWhitelistCount = _setIndefiniteWhitelistStatus(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            status\\n        );\\n        emit SetIndefiniteWhitelistStatus(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            status,\\n            indefiniteWhitelistCount\\n        );\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted to `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair by a specific account and emits an\\n    /// event\\n    /// @dev Only emits the event if it changes the state\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function _revokeIndefiniteWhitelistStatusAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) internal {\\n        (\\n            bool revoked,\\n            uint192 indefiniteWhitelistCount\\n        ) = _revokeIndefiniteWhitelistStatus(\\n                deriveServiceId(airnode, endpointId),\\n                requester,\\n                setter\\n            );\\n        if (revoked) {\\n            emit RevokedIndefiniteWhitelistStatus(\\n                airnode,\\n                endpointId,\\n                requester,\\n                setter,\\n                msg.sender,\\n                indefiniteWhitelistCount\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns if `requester` is whitelisted for the\\n    /// `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @return isWhitelisted If `requester` is whitelisted for the\\n    /// `airnode`\\u2013`endpointId` pair\\n    function requesterIsWhitelisted(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    ) public view override returns (bool isWhitelisted) {\\n        isWhitelisted = userIsWhitelisted(\\n            deriveServiceId(airnode, endpointId),\\n            requester\\n        );\\n    }\\n\\n    /// @notice Verifies the authorization status of a request\\n    /// @dev This method has redundant arguments because all authorizer\\n    /// contracts have to have the same interface and potential authorizer\\n    /// contracts may require to access the arguments that are redundant here\\n    /// @param requestId Request ID\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param sponsor Sponsor address\\n    /// @param requester Requester address\\n    /// @return Authorization status of the request\\n    function isAuthorized(\\n        bytes32 requestId, // solhint-disable-line no-unused-vars\\n        address airnode,\\n        bytes32 endpointId,\\n        address sponsor, // solhint-disable-line no-unused-vars\\n        address requester\\n    ) external view override returns (bool) {\\n        return requesterIsWhitelisted(airnode, endpointId, requester);\\n    }\\n\\n    /// @notice Returns the whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @return expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    /// @return indefiniteWhitelistCount Number of times `requester` was\\n    /// whitelisted indefinitely for the `airnode`\\u2013`endpointId` pair\\n    function airnodeToEndpointIdToRequesterToWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    )\\n        external\\n        view\\n        override\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                deriveServiceId(airnode, endpointId)\\n            ][requester];\\n        expirationTimestamp = whitelistStatus.expirationTimestamp;\\n        indefiniteWhitelistCount = whitelistStatus.indefiniteWhitelistCount;\\n    }\\n\\n    /// @notice Returns if an account has indefinitely whitelisted `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Address of the account that has potentially whitelisted\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair indefinitely\\n    /// @return indefiniteWhitelistStatus If `setter` has indefinitely\\n    /// whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\\n    function airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external view override returns (bool indefiniteWhitelistStatus) {\\n        indefiniteWhitelistStatus = serviceIdToUserToSetterToIndefiniteWhitelistStatus[\\n            deriveServiceId(airnode, endpointId)\\n        ][requester][setter];\\n    }\\n\\n    /// @notice Called privately to derive a service ID out of the Airnode\\n    /// address and the endpoint ID\\n    /// @dev This is done to re-use the more general Whitelist contract for\\n    /// the specific case of Airnode\\u2013endpoint pairs\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @return serviceId Service ID\\n    function deriveServiceId(address airnode, bytes32 endpointId)\\n        private\\n        pure\\n        returns (bytes32 serviceId)\\n    {\\n        serviceId = keccak256(abi.encodePacked(airnode, endpointId));\\n    }\\n}\\n\",\"keccak256\":\"0xc56e0d3919c15a9ba6f26afd24e804688ba6b334e272fe617a846f2142a484bd\",\"license\":\"MIT\"},\"contracts/authorizers/RequesterAuthorizerWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../whitelist/WhitelistRolesWithAirnode.sol\\\";\\nimport \\\"./RequesterAuthorizer.sol\\\";\\nimport \\\"./interfaces/IRequesterAuthorizerWithAirnode.sol\\\";\\n\\n/// @title Authorizer contract that Airnodes can use to temporarily or\\n/// indefinitely whitelist requesters for Airnode\\u2013endpoint pairs\\ncontract RequesterAuthorizerWithAirnode is\\n    WhitelistRolesWithAirnode,\\n    RequesterAuthorizer,\\n    IRequesterAuthorizerWithAirnode\\n{\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    )\\n        WhitelistRolesWithAirnode(_accessControlRegistry, _adminRoleDescription)\\n    {}\\n\\n    /// @notice Extends the expiration of the temporary whitelist of\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the\\n    /// whitelist expiration extender role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function extendWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            hasWhitelistExpirationExtenderRoleOrIsAirnode(airnode, msg.sender),\\n            \\\"Not expiration extender\\\"\\n        );\\n        _extendWhitelistExpirationAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist\\n    /// expiration setter role\\n    /// @dev Unlike `extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function setWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            hasWhitelistExpirationSetterRoleOrIsAirnode(airnode, msg.sender),\\n            \\\"Not expiration setter\\\"\\n        );\\n        _setWhitelistExpirationAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair if the sender has the indefinite\\n    /// whitelister role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param status Indefinite whitelist status\\n    function setIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) external override {\\n        require(\\n            hasIndefiniteWhitelisterRoleOrIsAirnode(airnode, msg.sender),\\n            \\\"Not indefinite whitelister\\\"\\n        );\\n        _setIndefiniteWhitelistStatusAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            status\\n        );\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted by a specific\\n    /// account that no longer has the indefinite whitelister role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function revokeIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external override {\\n        require(\\n            !hasIndefiniteWhitelisterRoleOrIsAirnode(airnode, setter),\\n            \\\"setter is indefinite whitelister\\\"\\n        );\\n        _revokeIndefiniteWhitelistStatusAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            setter\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x551a709238892d128b8bec08667fcded61e8ae0207863e81cc36d7a141353bb7\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IAuthorizer {\\n    function isAuthorized(\\n        bytes32 requestId,\\n        address airnode,\\n        bytes32 endpointId,\\n        address sponsor,\\n        address requester\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1e79618ac9f86b0c1181a8c6790ecc787652c4f5124537d8a06b35a957d8d6d8\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IRequesterAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IRequesterAuthorizer is IAuthorizer {\\n    event ExtendedWhitelistExpiration(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetWhitelistExpiration(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetIndefiniteWhitelistStatus(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        bool status,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    event RevokedIndefiniteWhitelistStatus(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed setter,\\n        address sender,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    function extendWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) external;\\n\\n    function revokeIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external;\\n\\n    function requesterIsWhitelisted(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    ) external view returns (bool isWhitelisted);\\n\\n    function airnodeToEndpointIdToRequesterToWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    )\\n        external\\n        view\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount);\\n\\n    function airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external view returns (bool indefiniteWhitelistStatus);\\n}\\n\",\"keccak256\":\"0x99359db012dfa8595725f9384e115c9ce4cc805032d0cc60207627a54182fbfa\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IRequesterAuthorizerWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../../whitelist/interfaces/IWhitelistRolesWithAirnode.sol\\\";\\nimport \\\"./IRequesterAuthorizer.sol\\\";\\n\\ninterface IRequesterAuthorizerWithAirnode is\\n    IWhitelistRolesWithAirnode,\\n    IRequesterAuthorizer\\n{}\\n\",\"keccak256\":\"0xa5463aa94c268cd79f89ce82e952a962943e9c636935953b9bd79c9211cc1a47\",\"license\":\"MIT\"},\"contracts/whitelist/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Contract that implements temporary and permanent whitelists for\\n/// multiple services identified with a hash\\n/// @notice This contract implements two kinds of whitelisting:\\n///   (1) Temporary, ends when the expiration timestamp is in the past\\n///   (2) Indefinite, ends when the indefinite whitelist count is zero\\n/// Multiple senders can idefinitely whitelist/unwhitelist independently. The\\n/// user will be considered whitelisted as long as there is at least one active\\n/// indefinite whitelisting.\\n/// @dev The interface of this contract is not implemented. It should be\\n/// inherited and its functions should be exposed with a sort of an\\n/// authorization scheme.\\ncontract Whitelist {\\n    struct WhitelistStatus {\\n        uint64 expirationTimestamp;\\n        uint192 indefiniteWhitelistCount;\\n    }\\n\\n    mapping(bytes32 => mapping(address => WhitelistStatus))\\n        internal serviceIdToUserToWhitelistStatus;\\n\\n    mapping(bytes32 => mapping(address => mapping(address => bool)))\\n        internal serviceIdToUserToSetterToIndefiniteWhitelistStatus;\\n\\n    /// @notice Extends the expiration of the temporary whitelist of the user\\n    /// for the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _extendWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        require(\\n            expirationTimestamp >\\n                serviceIdToUserToWhitelistStatus[serviceId][user]\\n                    .expirationTimestamp,\\n            \\\"Does not extend expiration\\\"\\n        );\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of the user for\\n    /// the service\\n    /// @dev Unlike `extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _setWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of the user for the\\n    /// service\\n    /// @dev As long as at least there is at least one account that has set the\\n    /// indefinite whitelist status of the user for the service as true, the\\n    /// user will be considered whitelisted.\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param status Indefinite whitelist status\\n    function _setIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        bool status\\n    ) internal returns (uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            status &&\\n            !serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][\\n                user\\n            ][msg.sender]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = true;\\n            indefiniteWhitelistCount++;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        } else if (\\n            !status &&\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        }\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted to the user for\\n    /// the service by a specific account\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function _revokeIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        address setter\\n    ) internal returns (bool revoked, uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n            revoked = true;\\n        }\\n    }\\n\\n    /// @notice Returns if the user is whitelised to use the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @return isWhitelisted If the user is whitelisted\\n    function userIsWhitelisted(bytes32 serviceId, address user)\\n        internal\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                serviceId\\n            ][user];\\n        return\\n            whitelistStatus.indefiniteWhitelistCount > 0 ||\\n            whitelistStatus.expirationTimestamp > block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0ecc1f2f487ff5ae49ddb2d776f735b52068226beff8220d5bc12cf017a8dbca\",\"license\":\"MIT\"},\"contracts/whitelist/WhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../access-control-registry/RoleDeriver.sol\\\";\\nimport \\\"../access-control-registry/AccessControlClient.sol\\\";\\nimport \\\"./interfaces/IWhitelistRoles.sol\\\";\\n\\n/// @title Contract that implements generic AccessControlRegistry roles for a\\n/// whitelist contract\\ncontract WhitelistRoles is RoleDeriver, AccessControlClient, IWhitelistRoles {\\n    // There are four roles implemented in this contract:\\n    // Root\\n    // \\u2514\\u2500\\u2500 (1) Admin (can grant and revoke the roles below)\\n    //     \\u251c\\u2500\\u2500 (2) Whitelist expiration extender\\n    //     \\u251c\\u2500\\u2500 (3) Whitelist expiration setter\\n    //     \\u2514\\u2500\\u2500 (4) Indefinite whitelister\\n    // Their IDs are derived from the descriptions below. Refer to\\n    // AccessControlRegistry for more information.\\n    string public override adminRoleDescription;\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration extender\\\";\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration setter\\\";\\n    string public constant override INDEFINITE_WHITELISTER_ROLE_DESCRIPTION =\\n        \\\"Indefinite whitelister\\\";\\n    bytes32 internal adminRoleDescriptionHash;\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION)\\n        );\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION)\\n        );\\n    bytes32 internal constant INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(abi.encodePacked(INDEFINITE_WHITELISTER_ROLE_DESCRIPTION));\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same roles, meaning that granting an account a role will authorize\\n    /// it in multiple contracts. Unless you want your deployed contract to\\n    /// reuse the role configuration of another contract, use a unique admin\\n    /// role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) AccessControlClient(_accessControlRegistry) {\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 adminRole)\\n    {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n\\n    /// @notice Derives the whitelist expiration extender role for the specific\\n    /// manager address\\n    /// @param manager Manager address\\n    /// @return whitelistExpirationExtenderRole Whitelist expiration extender\\n    /// role\\n    function _deriveWhitelistExpirationExtenderRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 whitelistExpirationExtenderRole)\\n    {\\n        whitelistExpirationExtenderRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the whitelist expiration setter role for the specific\\n    /// manager address\\n    /// @param manager Manager address\\n    /// @return whitelistExpirationSetterRole Whitelist expiration setter role\\n    function _deriveWhitelistExpirationSetterRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 whitelistExpirationSetterRole)\\n    {\\n        whitelistExpirationSetterRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the indefinite whitelister role for the specific\\n    /// manager address\\n    /// @param manager Manager address\\n    /// @return indefiniteWhitelisterRole Indefinite whitelister role\\n    function _deriveIndefiniteWhitelisterRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 indefiniteWhitelisterRole)\\n    {\\n        indefiniteWhitelisterRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1d30ddde063a6b1221d67b41b3d83063ed3b464f1b67f0767996ce3a6fe59b90\",\"license\":\"MIT\"},\"contracts/whitelist/WhitelistRolesWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./WhitelistRoles.sol\\\";\\nimport \\\"./interfaces/IWhitelistRolesWithAirnode.sol\\\";\\nimport \\\"../access-control-registry/interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Contract that implements AccessControlRegistry roles for a whitelist\\n/// contract where each individual Airnode address is its own manager\\ncontract WhitelistRolesWithAirnode is\\n    WhitelistRoles,\\n    IWhitelistRolesWithAirnode\\n{\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) WhitelistRoles(_accessControlRegistry, _adminRoleDescription) {}\\n\\n    /// @notice Derives the admin role for the specific Airnode address\\n    /// @param airnode Airnode address\\n    /// @return adminRole Admin role\\n    function deriveAdminRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 adminRole)\\n    {\\n        adminRole = _deriveAdminRole(airnode);\\n    }\\n\\n    /// @notice Derives the whitelist expiration extender role for the specific\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @return whitelistExpirationExtenderRole Whitelist expiration extender\\n    /// role\\n    function deriveWhitelistExpirationExtenderRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 whitelistExpirationExtenderRole)\\n    {\\n        whitelistExpirationExtenderRole = _deriveWhitelistExpirationExtenderRole(\\n            airnode\\n        );\\n    }\\n\\n    /// @notice Derives the whitelist expiration setter role for the specific\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @return whitelistExpirationSetterRole Whitelist expiration setter role\\n    function deriveWhitelistExpirationSetterRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 whitelistExpirationSetterRole)\\n    {\\n        whitelistExpirationSetterRole = _deriveWhitelistExpirationSetterRole(\\n            airnode\\n        );\\n    }\\n\\n    /// @notice Derives the indefinite whitelister role for the specific\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @return indefiniteWhitelisterRole Indefinite whitelister role\\n    function deriveIndefiniteWhitelisterRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 indefiniteWhitelisterRole)\\n    {\\n        indefiniteWhitelisterRole = _deriveIndefiniteWhitelisterRole(airnode);\\n    }\\n\\n    /// @dev Returns if the account has the whitelist expiration extender role\\n    /// or is the Airnode address\\n    /// @param airnode Airnode address\\n    /// @param account Account address\\n    /// @return If the account has the whitelist extender role or is the\\n    /// Airnode address\\n    function hasWhitelistExpirationExtenderRoleOrIsAirnode(\\n        address airnode,\\n        address account\\n    ) internal view returns (bool) {\\n        return\\n            airnode == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                deriveWhitelistExpirationExtenderRole(airnode),\\n                account\\n            );\\n    }\\n\\n    /// @dev Returns if the account has the whitelist expriation setter role or\\n    /// is the Airnode address\\n    /// @param airnode Airnode address\\n    /// @param account Account address\\n    /// @return If the account has the whitelist setter role or is the Airnode\\n    /// address\\n    function hasWhitelistExpirationSetterRoleOrIsAirnode(\\n        address airnode,\\n        address account\\n    ) internal view returns (bool) {\\n        return\\n            airnode == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                deriveWhitelistExpirationSetterRole(airnode),\\n                account\\n            );\\n    }\\n\\n    /// @dev Returns if the account has the indefinite whitelister role or is the\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @param account Account address\\n    /// @return If the account has the indefinite whitelister role or is the\\n    /// Airnode addrss\\n    function hasIndefiniteWhitelisterRoleOrIsAirnode(\\n        address airnode,\\n        address account\\n    ) internal view returns (bool) {\\n        return\\n            airnode == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                deriveIndefiniteWhitelisterRole(airnode),\\n                account\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xabea85dc9a809a0497a038df7b249041fdb02f097419996ecc860c7db5ee5708\",\"license\":\"MIT\"},\"contracts/whitelist/interfaces/IWhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IWhitelistRoles {\\n    function adminRoleDescription() external view returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa89ac9db99405fb19ea1d443cd0d7f8011d8027d654a58563e8e6fa56c903704\",\"license\":\"MIT\"},\"contracts/whitelist/interfaces/IWhitelistRolesWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IWhitelistRoles.sol\\\";\\n\\ninterface IWhitelistRolesWithAirnode is IWhitelistRoles {\\n    function deriveAdminRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveWhitelistExpirationExtenderRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveWhitelistExpirationSetterRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveIndefiniteWhitelisterRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0x503fdd0d257aefc988768cdd897e81bb15b5e95c1c0a592af520a334418e22a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002a5238038062002a52833981810160405281019062000037919062000431565b8181818181600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a690620004f8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505060008151116200012b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000122906200056a565b60405180910390fd5b8060009080519060200190620001439291906200017f565b5080604051602001620001579190620005d9565b6040516020818303038152906040528051906020012060018190555050505050505062000657565b8280546200018d9062000621565b90600052602060002090601f016020900481019282620001b15760008555620001fd565b82601f10620001cc57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fc578251825591602001919060010190620001df565b5b5090506200020c919062000210565b5090565b5b808211156200022b57600081600090555060010162000211565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002708262000243565b9050919050565b620002828162000263565b81146200028e57600080fd5b50565b600081519050620002a28162000277565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002fd82620002b2565b810181811067ffffffffffffffff821117156200031f576200031e620002c3565b5b80604052505050565b6000620003346200022f565b9050620003428282620002f2565b919050565b600067ffffffffffffffff821115620003655762000364620002c3565b5b6200037082620002b2565b9050602081019050919050565b60005b838110156200039d57808201518184015260208101905062000380565b83811115620003ad576000848401525b50505050565b6000620003ca620003c48462000347565b62000328565b905082815260208101848484011115620003e957620003e8620002ad565b5b620003f68482856200037d565b509392505050565b600082601f830112620004165762000415620002a8565b5b815162000428848260208601620003b3565b91505092915050565b600080604083850312156200044b576200044a62000239565b5b60006200045b8582860162000291565b925050602083015167ffffffffffffffff8111156200047f576200047e6200023e565b5b6200048d85828601620003fe565b9150509250929050565b600082825260208201905092915050565b7f4143522061646472657373207a65726f00000000000000000000000000000000600082015250565b6000620004e060108362000497565b9150620004ed82620004a8565b602082019050919050565b600060208201905081810360008301526200051381620004d1565b9050919050565b7f41646d696e20726f6c65206465736372697074696f6e20656d70747900000000600082015250565b600062000552601c8362000497565b91506200055f826200051a565b602082019050919050565b60006020820190508181036000830152620005858162000543565b9050919050565b600081519050919050565b600081905092915050565b6000620005af826200058c565b620005bb818562000597565b9350620005cd8185602086016200037d565b80840191505092915050565b6000620005e78284620005a2565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200063a57607f821691505b60208210811415620006515762000650620005f2565b5b50919050565b6080516123ca6200068860003960008181610399015281816108aa01528181610a3c0152610d2a01526123ca6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063661f53b7116100a25780637e766bc1116100715780637e766bc1146102cc57806382d229e3146102e85780639caa101b14610319578063b6316d8814610349578063d55a42dd146103795761010b565b8063661f53b7146102445780636bd2bdd0146102745780636db798f91461029257806373c0627e146102b05761010b565b80634c8f1d8d116100de5780634c8f1d8d146101965780634cffd606146101b457806352300976146101e45780635d51dbdc146102145761010b565b80631ce9ae0714610110578063216de27e1461012e57806343b649621461015e5780634751c2e21461017a575b600080fd5b610118610397565b6040516101259190611963565b60405180910390f35b610148600480360381019061014391906119e5565b6103bb565b6040516101559190611a67565b60405180910390f35b61017860048036038101906101739190611aae565b61046b565b005b610194600480360381019061018f9190611b55565b6104c6565b005b61019e610521565b6040516101ab9190611c55565b60405180910390f35b6101ce60048036038101906101c99190611c77565b6105af565b6040516101db9190611cb3565b60405180910390f35b6101fe60048036038101906101f99190611c77565b6105c1565b60405161020b9190611cb3565b60405180910390f35b61022e60048036038101906102299190611cce565b6105d3565b60405161023b9190611a67565b60405180910390f35b61025e60048036038101906102599190611d49565b6105eb565b60405161026b9190611a67565b60405180910390f35b61027c610609565b6040516102899190611c55565b60405180910390f35b61029a610642565b6040516102a79190611c55565b60405180910390f35b6102ca60048036038101906102c59190611b55565b61067b565b005b6102e660048036038101906102e191906119e5565b6106d6565b005b61030260048036038101906102fd9190611d49565b610732565b604051610310929190611dde565b60405180910390f35b610333600480360381019061032e9190611c77565b6107e1565b6040516103409190611cb3565b60405180910390f35b610363600480360381019061035e9190611c77565b6107f3565b6040516103709190611cb3565b60405180910390f35b610381610805565b60405161038e9190611c55565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360006103cb878761083e565b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050949350505050565b6104758433610871565b6104b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ab90611e53565b60405180910390fd5b6104c084848484610964565b50505050565b6104d08433610a03565b61050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690611ebf565b60405180910390fd5b61051b84848484610af6565b50505050565b6000805461052e90611f0e565b80601f016020809104026020016040519081016040528092919081815260200182805461055a90611f0e565b80156105a75780601f1061057c576101008083540402835291602001916105a7565b820191906000526020600020905b81548152906001019060200180831161058a57829003601f168201915b505050505081565b60006105ba82610b8e565b9050919050565b60006105cc82610bab565b9050919050565b60006105e08585846105eb565b905095945050505050565b60006106006105fa858561083e565b83610c21565b90509392505050565b6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e20736574746572000000000081525081565b6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e64657200000081525081565b6106858433610cf1565b6106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90611f8c565b60405180910390fd5b6106d084848484610de4565b50505050565b6106e08482610871565b15610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071790611ff8565b60405180910390fd5b61072c84848484610e7c565b50505050565b600080600060026000610745888861083e565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900467ffffffffffffffff1692508060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16915050935093915050565b60006107ec82610f26565b9050919050565b60006107fe82610f9c565b9050919050565b6040518060400160405280601681526020017f496e646566696e6974652077686974656c69737465720000000000000000000081525081565b60008282604051602001610853929190612081565b60405160208183030381529060405280519060200120905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061095c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d148546108ed856107e1565b846040518363ffffffff1660e01b815260040161090b9291906120ad565b60206040518083038186803b15801561092357600080fd5b505afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b91906120eb565b5b905092915050565b600061097a610973868661083e565b8484611012565b90503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f13d4d6afcb6d196f753a522f275673066719bb13944bd021efd1fca4286df20d8786866040516109f493929190612118565b60405180910390a45050505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610aee57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d14854610a7f856107f3565b846040518363ffffffff1660e01b8152600401610a9d9291906120ad565b60206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906120eb565b5b905092915050565b610b0a610b03858561083e565b838361148c565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f375ee45428e158031095010484fd6451af89c501c79d75e390da4e91eb480ce18685604051610b80929190612194565b60405180910390a450505050565b6000610ba4610b9c8361150b565b60015461153b565b9050919050565b6000610c1a610bb983610b8e565b6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e646572000000815250604051602001610bff91906121f9565b6040516020818303038152906040528051906020012061153b565b9050919050565b6000806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff161180610ce85750428160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16115b91505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610ddc57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d14854610d6d856105c1565b846040518363ffffffff1660e01b8152600401610d8b9291906120ad565b60206040518083038186803b158015610da357600080fd5b505afa158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb91906120eb565b5b905092915050565b610df8610df1858561083e565b838361156e565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167ff9b174be67f83278d4516865d1b9ba4576b73e523ea0c2f124ea29152bb1b6768685604051610e6e929190612194565b60405180910390a450505050565b600080610e93610e8c878761083e565b85856116aa565b915091508115610f1e578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fdca622020d204c36e9588e7be4184758283d992606ab73318776824b44e2859d883386604051610f1593929190612210565b60405180910390a45b505050505050565b6000610f95610f3483610b8e565b6040518060400160405280601681526020017f496e646566696e6974652077686974656c697374657200000000000000000000815250604051602001610f7a91906121f9565b6040516020818303038152906040528051906020012061153b565b9050919050565b600061100b610faa83610b8e565b6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e207365747465720000000000815250604051602001610ff091906121f9565b6040516020818303038152906040528051906020012061153b565b9050919050565b60006002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16905081801561113357506003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561128b5760016003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806111e990612276565b915050806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550611485565b8115801561133057506003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156114845760006003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806113e6906122b7565b915050806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055505b5b9392505050565b806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b60008160405160200161151e91906122e1565b604051602081830303815290604052805190602001209050919050565b600082826040516020016115509291906122fc565b60405160208183030381529060405280519060200120905092915050565b6002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff161161162b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162290612374565b60405180910390fd5b806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b6000806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1690506003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561191a5760006003600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611878906122b7565b915050806002600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550600191505b935093915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061194d82611922565b9050919050565b61195d81611942565b82525050565b60006020820190506119786000830184611954565b92915050565b600080fd5b61198c81611942565b811461199757600080fd5b50565b6000813590506119a981611983565b92915050565b6000819050919050565b6119c2816119af565b81146119cd57600080fd5b50565b6000813590506119df816119b9565b92915050565b600080600080608085870312156119ff576119fe61197e565b5b6000611a0d8782880161199a565b9450506020611a1e878288016119d0565b9350506040611a2f8782880161199a565b9250506060611a408782880161199a565b91505092959194509250565b60008115159050919050565b611a6181611a4c565b82525050565b6000602082019050611a7c6000830184611a58565b92915050565b611a8b81611a4c565b8114611a9657600080fd5b50565b600081359050611aa881611a82565b92915050565b60008060008060808587031215611ac857611ac761197e565b5b6000611ad68782880161199a565b9450506020611ae7878288016119d0565b9350506040611af88782880161199a565b9250506060611b0987828801611a99565b91505092959194509250565b600067ffffffffffffffff82169050919050565b611b3281611b15565b8114611b3d57600080fd5b50565b600081359050611b4f81611b29565b92915050565b60008060008060808587031215611b6f57611b6e61197e565b5b6000611b7d8782880161199a565b9450506020611b8e878288016119d0565b9350506040611b9f8782880161199a565b9250506060611bb087828801611b40565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bf6578082015181840152602081019050611bdb565b83811115611c05576000848401525b50505050565b6000601f19601f8301169050919050565b6000611c2782611bbc565b611c318185611bc7565b9350611c41818560208601611bd8565b611c4a81611c0b565b840191505092915050565b60006020820190508181036000830152611c6f8184611c1c565b905092915050565b600060208284031215611c8d57611c8c61197e565b5b6000611c9b8482850161199a565b91505092915050565b611cad816119af565b82525050565b6000602082019050611cc86000830184611ca4565b92915050565b600080600080600060a08688031215611cea57611ce961197e565b5b6000611cf8888289016119d0565b9550506020611d098882890161199a565b9450506040611d1a888289016119d0565b9350506060611d2b8882890161199a565b9250506080611d3c8882890161199a565b9150509295509295909350565b600080600060608486031215611d6257611d6161197e565b5b6000611d708682870161199a565b9350506020611d81868287016119d0565b9250506040611d928682870161199a565b9150509250925092565b611da581611b15565b82525050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b611dd881611dab565b82525050565b6000604082019050611df36000830185611d9c565b611e006020830184611dcf565b9392505050565b7f4e6f7420696e646566696e6974652077686974656c6973746572000000000000600082015250565b6000611e3d601a83611bc7565b9150611e4882611e07565b602082019050919050565b60006020820190508181036000830152611e6c81611e30565b9050919050565b7f4e6f742065787069726174696f6e207365747465720000000000000000000000600082015250565b6000611ea9601583611bc7565b9150611eb482611e73565b602082019050919050565b60006020820190508181036000830152611ed881611e9c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f2657607f821691505b60208210811415611f3a57611f39611edf565b5b50919050565b7f4e6f742065787069726174696f6e20657874656e646572000000000000000000600082015250565b6000611f76601783611bc7565b9150611f8182611f40565b602082019050919050565b60006020820190508181036000830152611fa581611f69565b9050919050565b7f73657474657220697320696e646566696e6974652077686974656c6973746572600082015250565b6000611fe2602083611bc7565b9150611fed82611fac565b602082019050919050565b6000602082019050818103600083015261201181611fd5565b9050919050565b60008160601b9050919050565b600061203082612018565b9050919050565b600061204282612025565b9050919050565b61205a61205582611942565b612037565b82525050565b6000819050919050565b61207b612076826119af565b612060565b82525050565b600061208d8285612049565b60148201915061209d828461206a565b6020820191508190509392505050565b60006040820190506120c26000830185611ca4565b6120cf6020830184611954565b9392505050565b6000815190506120e581611a82565b92915050565b6000602082840312156121015761210061197e565b5b600061210f848285016120d6565b91505092915050565b600060608201905061212d6000830186611ca4565b61213a6020830185611a58565b6121476040830184611dcf565b949350505050565b6000819050919050565b6000819050919050565b600061217e61217961217484611b15565b612159565b61214f565b9050919050565b61218e81612163565b82525050565b60006040820190506121a96000830185611ca4565b6121b66020830184612185565b9392505050565b600081905092915050565b60006121d382611bbc565b6121dd81856121bd565b93506121ed818560208601611bd8565b80840191505092915050565b600061220582846121c8565b915081905092915050565b60006060820190506122256000830186611ca4565b6122326020830185611954565b61223f6040830184611dcf565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061228182611dab565b915077ffffffffffffffffffffffffffffffffffffffffffffffff8214156122ac576122ab612247565b5b600182019050919050565b60006122c282611dab565b915060008214156122d6576122d5612247565b5b600182039050919050565b60006122ed8284612049565b60148201915081905092915050565b6000612308828561206a565b602082019150612318828461206a565b6020820191508190509392505050565b7f446f6573206e6f7420657874656e642065787069726174696f6e000000000000600082015250565b600061235e601a83611bc7565b915061236982612328565b602082019050919050565b6000602082019050818103600083015261238d81612351565b905091905056fea2646970667358221220fe9f41c26830ae92242e2ace88c1a7f891f3f32afb03d9e6369ea6a6d65323e464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063661f53b7116100a25780637e766bc1116100715780637e766bc1146102cc57806382d229e3146102e85780639caa101b14610319578063b6316d8814610349578063d55a42dd146103795761010b565b8063661f53b7146102445780636bd2bdd0146102745780636db798f91461029257806373c0627e146102b05761010b565b80634c8f1d8d116100de5780634c8f1d8d146101965780634cffd606146101b457806352300976146101e45780635d51dbdc146102145761010b565b80631ce9ae0714610110578063216de27e1461012e57806343b649621461015e5780634751c2e21461017a575b600080fd5b610118610397565b6040516101259190611963565b60405180910390f35b610148600480360381019061014391906119e5565b6103bb565b6040516101559190611a67565b60405180910390f35b61017860048036038101906101739190611aae565b61046b565b005b610194600480360381019061018f9190611b55565b6104c6565b005b61019e610521565b6040516101ab9190611c55565b60405180910390f35b6101ce60048036038101906101c99190611c77565b6105af565b6040516101db9190611cb3565b60405180910390f35b6101fe60048036038101906101f99190611c77565b6105c1565b60405161020b9190611cb3565b60405180910390f35b61022e60048036038101906102299190611cce565b6105d3565b60405161023b9190611a67565b60405180910390f35b61025e60048036038101906102599190611d49565b6105eb565b60405161026b9190611a67565b60405180910390f35b61027c610609565b6040516102899190611c55565b60405180910390f35b61029a610642565b6040516102a79190611c55565b60405180910390f35b6102ca60048036038101906102c59190611b55565b61067b565b005b6102e660048036038101906102e191906119e5565b6106d6565b005b61030260048036038101906102fd9190611d49565b610732565b604051610310929190611dde565b60405180910390f35b610333600480360381019061032e9190611c77565b6107e1565b6040516103409190611cb3565b60405180910390f35b610363600480360381019061035e9190611c77565b6107f3565b6040516103709190611cb3565b60405180910390f35b610381610805565b60405161038e9190611c55565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360006103cb878761083e565b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050949350505050565b6104758433610871565b6104b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ab90611e53565b60405180910390fd5b6104c084848484610964565b50505050565b6104d08433610a03565b61050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690611ebf565b60405180910390fd5b61051b84848484610af6565b50505050565b6000805461052e90611f0e565b80601f016020809104026020016040519081016040528092919081815260200182805461055a90611f0e565b80156105a75780601f1061057c576101008083540402835291602001916105a7565b820191906000526020600020905b81548152906001019060200180831161058a57829003601f168201915b505050505081565b60006105ba82610b8e565b9050919050565b60006105cc82610bab565b9050919050565b60006105e08585846105eb565b905095945050505050565b60006106006105fa858561083e565b83610c21565b90509392505050565b6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e20736574746572000000000081525081565b6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e64657200000081525081565b6106858433610cf1565b6106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90611f8c565b60405180910390fd5b6106d084848484610de4565b50505050565b6106e08482610871565b15610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071790611ff8565b60405180910390fd5b61072c84848484610e7c565b50505050565b600080600060026000610745888861083e565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900467ffffffffffffffff1692508060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16915050935093915050565b60006107ec82610f26565b9050919050565b60006107fe82610f9c565b9050919050565b6040518060400160405280601681526020017f496e646566696e6974652077686974656c69737465720000000000000000000081525081565b60008282604051602001610853929190612081565b60405160208183030381529060405280519060200120905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061095c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d148546108ed856107e1565b846040518363ffffffff1660e01b815260040161090b9291906120ad565b60206040518083038186803b15801561092357600080fd5b505afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b91906120eb565b5b905092915050565b600061097a610973868661083e565b8484611012565b90503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f13d4d6afcb6d196f753a522f275673066719bb13944bd021efd1fca4286df20d8786866040516109f493929190612118565b60405180910390a45050505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610aee57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d14854610a7f856107f3565b846040518363ffffffff1660e01b8152600401610a9d9291906120ad565b60206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906120eb565b5b905092915050565b610b0a610b03858561083e565b838361148c565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f375ee45428e158031095010484fd6451af89c501c79d75e390da4e91eb480ce18685604051610b80929190612194565b60405180910390a450505050565b6000610ba4610b9c8361150b565b60015461153b565b9050919050565b6000610c1a610bb983610b8e565b6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e646572000000815250604051602001610bff91906121f9565b6040516020818303038152906040528051906020012061153b565b9050919050565b6000806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff161180610ce85750428160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16115b91505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610ddc57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d14854610d6d856105c1565b846040518363ffffffff1660e01b8152600401610d8b9291906120ad565b60206040518083038186803b158015610da357600080fd5b505afa158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb91906120eb565b5b905092915050565b610df8610df1858561083e565b838361156e565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167ff9b174be67f83278d4516865d1b9ba4576b73e523ea0c2f124ea29152bb1b6768685604051610e6e929190612194565b60405180910390a450505050565b600080610e93610e8c878761083e565b85856116aa565b915091508115610f1e578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fdca622020d204c36e9588e7be4184758283d992606ab73318776824b44e2859d883386604051610f1593929190612210565b60405180910390a45b505050505050565b6000610f95610f3483610b8e565b6040518060400160405280601681526020017f496e646566696e6974652077686974656c697374657200000000000000000000815250604051602001610f7a91906121f9565b6040516020818303038152906040528051906020012061153b565b9050919050565b600061100b610faa83610b8e565b6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e207365747465720000000000815250604051602001610ff091906121f9565b6040516020818303038152906040528051906020012061153b565b9050919050565b60006002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16905081801561113357506003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561128b5760016003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806111e990612276565b915050806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550611485565b8115801561133057506003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156114845760006003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806113e6906122b7565b915050806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055505b5b9392505050565b806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b60008160405160200161151e91906122e1565b604051602081830303815290604052805190602001209050919050565b600082826040516020016115509291906122fc565b60405160208183030381529060405280519060200120905092915050565b6002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff161161162b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162290612374565b60405180910390fd5b806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b6000806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1690506003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561191a5760006003600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611878906122b7565b915050806002600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550600191505b935093915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061194d82611922565b9050919050565b61195d81611942565b82525050565b60006020820190506119786000830184611954565b92915050565b600080fd5b61198c81611942565b811461199757600080fd5b50565b6000813590506119a981611983565b92915050565b6000819050919050565b6119c2816119af565b81146119cd57600080fd5b50565b6000813590506119df816119b9565b92915050565b600080600080608085870312156119ff576119fe61197e565b5b6000611a0d8782880161199a565b9450506020611a1e878288016119d0565b9350506040611a2f8782880161199a565b9250506060611a408782880161199a565b91505092959194509250565b60008115159050919050565b611a6181611a4c565b82525050565b6000602082019050611a7c6000830184611a58565b92915050565b611a8b81611a4c565b8114611a9657600080fd5b50565b600081359050611aa881611a82565b92915050565b60008060008060808587031215611ac857611ac761197e565b5b6000611ad68782880161199a565b9450506020611ae7878288016119d0565b9350506040611af88782880161199a565b9250506060611b0987828801611a99565b91505092959194509250565b600067ffffffffffffffff82169050919050565b611b3281611b15565b8114611b3d57600080fd5b50565b600081359050611b4f81611b29565b92915050565b60008060008060808587031215611b6f57611b6e61197e565b5b6000611b7d8782880161199a565b9450506020611b8e878288016119d0565b9350506040611b9f8782880161199a565b9250506060611bb087828801611b40565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bf6578082015181840152602081019050611bdb565b83811115611c05576000848401525b50505050565b6000601f19601f8301169050919050565b6000611c2782611bbc565b611c318185611bc7565b9350611c41818560208601611bd8565b611c4a81611c0b565b840191505092915050565b60006020820190508181036000830152611c6f8184611c1c565b905092915050565b600060208284031215611c8d57611c8c61197e565b5b6000611c9b8482850161199a565b91505092915050565b611cad816119af565b82525050565b6000602082019050611cc86000830184611ca4565b92915050565b600080600080600060a08688031215611cea57611ce961197e565b5b6000611cf8888289016119d0565b9550506020611d098882890161199a565b9450506040611d1a888289016119d0565b9350506060611d2b8882890161199a565b9250506080611d3c8882890161199a565b9150509295509295909350565b600080600060608486031215611d6257611d6161197e565b5b6000611d708682870161199a565b9350506020611d81868287016119d0565b9250506040611d928682870161199a565b9150509250925092565b611da581611b15565b82525050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b611dd881611dab565b82525050565b6000604082019050611df36000830185611d9c565b611e006020830184611dcf565b9392505050565b7f4e6f7420696e646566696e6974652077686974656c6973746572000000000000600082015250565b6000611e3d601a83611bc7565b9150611e4882611e07565b602082019050919050565b60006020820190508181036000830152611e6c81611e30565b9050919050565b7f4e6f742065787069726174696f6e207365747465720000000000000000000000600082015250565b6000611ea9601583611bc7565b9150611eb482611e73565b602082019050919050565b60006020820190508181036000830152611ed881611e9c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f2657607f821691505b60208210811415611f3a57611f39611edf565b5b50919050565b7f4e6f742065787069726174696f6e20657874656e646572000000000000000000600082015250565b6000611f76601783611bc7565b9150611f8182611f40565b602082019050919050565b60006020820190508181036000830152611fa581611f69565b9050919050565b7f73657474657220697320696e646566696e6974652077686974656c6973746572600082015250565b6000611fe2602083611bc7565b9150611fed82611fac565b602082019050919050565b6000602082019050818103600083015261201181611fd5565b9050919050565b60008160601b9050919050565b600061203082612018565b9050919050565b600061204282612025565b9050919050565b61205a61205582611942565b612037565b82525050565b6000819050919050565b61207b612076826119af565b612060565b82525050565b600061208d8285612049565b60148201915061209d828461206a565b6020820191508190509392505050565b60006040820190506120c26000830185611ca4565b6120cf6020830184611954565b9392505050565b6000815190506120e581611a82565b92915050565b6000602082840312156121015761210061197e565b5b600061210f848285016120d6565b91505092915050565b600060608201905061212d6000830186611ca4565b61213a6020830185611a58565b6121476040830184611dcf565b949350505050565b6000819050919050565b6000819050919050565b600061217e61217961217484611b15565b612159565b61214f565b9050919050565b61218e81612163565b82525050565b60006040820190506121a96000830185611ca4565b6121b66020830184612185565b9392505050565b600081905092915050565b60006121d382611bbc565b6121dd81856121bd565b93506121ed818560208601611bd8565b80840191505092915050565b600061220582846121c8565b915081905092915050565b60006060820190506122256000830186611ca4565b6122326020830185611954565b61223f6040830184611dcf565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061228182611dab565b915077ffffffffffffffffffffffffffffffffffffffffffffffff8214156122ac576122ab612247565b5b600182019050919050565b60006122c282611dab565b915060008214156122d6576122d5612247565b5b600182039050919050565b60006122ed8284612049565b60148201915081905092915050565b6000612308828561206a565b602082019150612318828461206a565b6020820191508190509392505050565b7f446f6573206e6f7420657874656e642065787069726174696f6e000000000000600082015250565b600061235e601a83611bc7565b915061236982612328565b602082019050919050565b6000602082019050818103600083015261238d81612351565b905091905056fea2646970667358221220fe9f41c26830ae92242e2ace88c1a7f891f3f32afb03d9e6369ea6a6d65323e464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "setter": "Address of the account that has potentially whitelisted `requester` for the `airnode`–`endpointId` pair indefinitely"
        },
        "returns": {
          "indefiniteWhitelistStatus": "If `setter` has indefinitely whitelisted `requester` for the `airnode`–`endpointId` pair"
        }
      },
      "airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address"
        },
        "returns": {
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "indefiniteWhitelistCount": "Number of times `requester` was whitelisted indefinitely for the `airnode`–`endpointId` pair"
        }
      },
      "constructor": {
        "params": {
          "_accessControlRegistry": "AccessControlRegistry contract address",
          "_adminRoleDescription": "Admin role description"
        }
      },
      "deriveAdminRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "adminRole": "Admin role"
        }
      },
      "deriveIndefiniteWhitelisterRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "indefiniteWhitelisterRole": "Indefinite whitelister role"
        }
      },
      "deriveWhitelistExpirationExtenderRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "whitelistExpirationExtenderRole": "Whitelist expiration extender role"
        }
      },
      "deriveWhitelistExpirationSetterRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "whitelistExpirationSetterRole": "Whitelist expiration setter role"
        }
      },
      "extendWhitelistExpiration(address,bytes32,address,uint64)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "requester": "Requester address"
        }
      },
      "isAuthorized(bytes32,address,bytes32,address,address)": {
        "details": "This method has redundant arguments because all authorizer contracts have to have the same interface and potential authorizer contracts may require to access the arguments that are redundant here",
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requestId": "Request ID",
          "requester": "Requester address",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "_0": "Authorization status of the request"
        }
      },
      "requesterIsWhitelisted(address,bytes32,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address"
        },
        "returns": {
          "isWhitelisted": "If `requester` is whitelisted for the `airnode`–`endpointId` pair"
        }
      },
      "revokeIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "setter": "Setter of the indefinite whitelist status"
        }
      },
      "setIndefiniteWhitelistStatus(address,bytes32,address,bool)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "status": "Indefinite whitelist status"
        }
      },
      "setWhitelistExpiration(address,bytes32,address,uint64)": {
        "details": "Unlike `extendWhitelistExpiration()`, this can hasten expiration",
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "requester": "Requester address"
        }
      }
    },
    "title": "Authorizer contract that Airnodes can use to temporarily or indefinitely whitelist requesters for Airnode–endpoint pairs",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accessControlRegistry()": {
        "notice": "Address of the AccessControlRegistry contract that keeps the roles"
      },
      "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "notice": "Returns if an account has indefinitely whitelisted `requester` for the `airnode`–`endpointId` pair"
      },
      "airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)": {
        "notice": "Returns the whitelist status of `requester` for the `airnode`–`endpointId` pair"
      },
      "deriveAdminRole(address)": {
        "notice": "Derives the admin role for the specific Airnode address"
      },
      "deriveIndefiniteWhitelisterRole(address)": {
        "notice": "Derives the indefinite whitelister role for the specific Airnode address"
      },
      "deriveWhitelistExpirationExtenderRole(address)": {
        "notice": "Derives the whitelist expiration extender role for the specific Airnode address"
      },
      "deriveWhitelistExpirationSetterRole(address)": {
        "notice": "Derives the whitelist expiration setter role for the specific Airnode address"
      },
      "extendWhitelistExpiration(address,bytes32,address,uint64)": {
        "notice": "Extends the expiration of the temporary whitelist of `requester` for the `airnode`–`endpointId` pair if the sender has the whitelist expiration extender role"
      },
      "isAuthorized(bytes32,address,bytes32,address,address)": {
        "notice": "Verifies the authorization status of a request"
      },
      "requesterIsWhitelisted(address,bytes32,address)": {
        "notice": "Returns if `requester` is whitelisted for the `airnode`–`endpointId` pair"
      },
      "revokeIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "notice": "Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role"
      },
      "setIndefiniteWhitelistStatus(address,bytes32,address,bool)": {
        "notice": "Sets the indefinite whitelist status of `requester` for the `airnode`–`endpointId` pair if the sender has the indefinite whitelister role"
      },
      "setWhitelistExpiration(address,bytes32,address,uint64)": {
        "notice": "Sets the expiration of the temporary whitelist of `requester` for the `airnode`–`endpointId` pair if the sender has the whitelist expiration setter role"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5019,
        "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 5033,
        "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "adminRoleDescriptionHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 4759,
        "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "serviceIdToUserToWhitelistStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)4752_storage))"
      },
      {
        "astId": 4767,
        "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "serviceIdToUserToSetterToIndefiniteWhitelistStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(WhitelistStatus)4752_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Whitelist.WhitelistStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(WhitelistStatus)4752_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)4752_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct Whitelist.WhitelistStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(WhitelistStatus)4752_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WhitelistStatus)4752_storage": {
        "encoding": "inplace",
        "label": "struct Whitelist.WhitelistStatus",
        "members": [
          {
            "astId": 4749,
            "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4751,
            "contract": "contracts/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
            "label": "indefiniteWhitelistCount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
